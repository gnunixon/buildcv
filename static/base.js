// Generated by CoffeeScript 1.4.0
var Ability, Award, Base, Confirm, CurriculumVitae, Form, Language, Progress, Send, Study, Work, base,
  _this = this;

Base = (function() {

  function Base() {
    var lang_options;
    this.datas = {
      'studies': [],
      'works': [],
      'awards': [],
      'abilities': []
    };
    lang_options = {
      resGetPath: '/static/locales/__ns__-__lng__.json',
      fallbackLng: 'ru',
      preload: ['ru', 'ro', 'en'],
      lng: "{{ request.user.human.lang }}"
    };
    $.i18n.init(lang_options);
    $('body *').i18n();
    this.scroll = $("html").niceScroll();
    this.cvs = [];
    this.current_cv = new CurriculumVitae({
      'id': null,
      'title': '',
      'studies': [],
      'works': [],
      'awards': [],
      'abilities': [],
      'pdf': '',
      'image': ''
    });
    this.current_language = new Language({
      'id': null,
      'lang': '',
      'read': 1,
      'write': 1,
      'speak': 1
    });
    this.current_language.render_form();
    this.active_study = null;
    this.active_work = null;
    this.active_award = null;
    this.active_ability = null;
    this.get_studies();
    this.get_works();
    this.get_awards();
    this.get_abilities();
    this.get_languages();
    this.get_cvs();
  }

  Base.prototype.get = function(params) {
    var _this = this;
    return $.get(params.url, function(data) {
      var ability, award, study, work, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _results;
      base.datas[params.list] = [];
      $(params.container).html('');
      $.each(data, function() {
        var item;
        item = eval(params["class"]);
        item.render();
        return base.datas[params.list].push(item);
      });
      _this.current_cv.populate();
      _this.scroll.resize();
      if (_this.active_study) {
        _ref = _this.datas.studies;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          study = _ref[_i];
          if (study.id === _this.active_study) {
            _this.study_form.populate(study);
          }
        }
      }
      if (_this.active_work) {
        _ref1 = _this.datas.works;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          work = _ref1[_j];
          if (work.id === _this.active_work) {
            _this.work_form.populate(work);
          }
        }
      }
      if (_this.active_award) {
        _ref2 = _this.datas.awards;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          award = _ref2[_k];
          if (award.id === _this.active_award) {
            _this.award_form.populate(award);
          }
        }
      }
      if (_this.active_ability) {
        _ref3 = _this.datas.abilities;
        _results = [];
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          ability = _ref3[_l];
          if (ability.id === _this.active_ability) {
            _results.push(_this.ability_form.populate(ability));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    });
  };

  Base.prototype.get_studies = function() {
    return this.get({
      'url': '/studies/get/',
      'list': 'studies',
      'container': '#studies tbody',
      'class': 'new Study(this);'
    });
  };

  Base.prototype.get_works = function() {
    return this.get({
      'url': '/works/get/',
      'list': 'works',
      'container': '#work tbody',
      'class': 'new Work(this);'
    });
  };

  Base.prototype.get_awards = function() {
    return this.get({
      'url': '/awards/get/',
      'list': 'awards',
      'container': '#awards tbody',
      'class': 'new Award(this);'
    });
  };

  Base.prototype.get_abilities = function() {
    return this.get({
      'url': '/abilities/get/',
      'list': 'abilities',
      'container': '#skills tbody',
      'class': 'new Ability(this);'
    });
  };

  Base.prototype.get_languages = function() {
    return $.get('/lang/get/', function(data) {
      $('#languages tbody').html('');
      $.each(data, function() {
        var lang;
        lang = new Language(this);
        return lang.render();
      });
      return this.scroll.resize();
    });
  };

  Base.prototype.get_cvs = function(update) {
    if (update == null) {
      update = false;
    }
    return $.get('/cvs/get/', function(data) {
      $('#cv-previews').html('');
      $.each(data, function() {
        var cv;
        cv = new CurriculumVitae(this);
        cv.render();
        return base.cvs.push(cv);
      });
      if (!update) {
        base.make_forms();
      }
      return this.scroll.resize();
    });
  };

  Base.prototype.make_forms = function() {
    this.study_form = new Form({
      'id': '#studyForm',
      'action': '/studies/',
      'submit': 'Add',
      'callback': 'base.get_studies()',
      'clear_callback': 'base.active_study=null',
      'fields': [
        {
          'name': 'begin_year',
          'type': 'number',
          'ph': 'From',
          'message': 'Please enter the year when you begin studies'
        }, {
          'name': 'end_year',
          'type': 'number',
          'ph': 'To',
          'message': 'Please enter the year when you finish the studies'
        }, {
          'name': 'inst',
          'type': 'text',
          'ph': 'School',
          'message': 'Please enter the name of institution'
        }, {
          'name': 'faculty',
          'type': 'text',
          'ph': 'Faculty',
          'message': 'Please enter the name of faculty'
        }
      ]
    });
    this.study_form.render();
    this.work_form = new Form({
      'id': '#workForm',
      'action': '/works/',
      'submit': 'Add',
      'callback': 'base.get_works()',
      'clear_callback': 'base.active_work=null',
      'fields': [
        {
          'name': 'begin_year',
          'type': 'number',
          'ph': 'From',
          'message': 'Please enter the year when you begin work'
        }, {
          'name': 'end_year',
          'type': 'number',
          'ph': 'To',
          'message': 'Please enter the year when you finish the work'
        }, {
          'name': 'inst',
          'type': 'text',
          'ph': 'Institution',
          'message': 'Please enter the name of institution'
        }, {
          'name': 'function',
          'type': 'text',
          'ph': 'Position',
          'message': 'Please enter your function'
        }, {
          'name': 'comments',
          'widget': 'textarea',
          'type': 'text',
          'ph': 'Comments',
          'message': 'Please enter aditional informations about your work'
        }
      ]
    });
    this.work_form.render();
    this.award_form = new Form({
      'id': '#awardForm',
      'action': '/awards/',
      'submit': 'Add',
      'callback': 'base.get_awards()',
      'clear_callback': 'base.active_award=null',
      'fields': [
        {
          'name': 'year',
          'type': 'number',
          'ph': 'Year',
          'message': 'Please enter the year'
        }, {
          'name': 'title',
          'type': 'text',
          'ph': 'Title',
          'message': 'Please enter the title'
        }, {
          'name': 'description',
          'type': 'text',
          'widget': 'textarea',
          'ph': 'Description',
          'message': 'Please enter the description'
        }
      ]
    });
    this.award_form.render();
    this.ability_form = new Form({
      'id': '#abilityForm',
      'action': '/abilities/',
      'submit': 'Add',
      'callback': 'base.get_abilities()',
      'clear_callback': 'base.active_ability=null',
      'fields': [
        {
          'name': 'title',
          'type': 'text',
          'ph': 'Title',
          'message': 'Please enter the title'
        }, {
          'name': 'description',
          'type': 'text',
          'widget': 'textarea',
          'ph': 'Description',
          'message': 'Please enter the description'
        }
      ]
    });
    this.ability_form.render();
    return this.scroll.resize();
  };

  return Base;

})();

Send = (function() {

  function Send(id) {
    this.id = id;
  }

  Send.prototype.render = function() {
    var content, send_form, template,
      _this = this;
    template = '\
        	<div class="modal-dialog">\
        		<div class="modal-content">\
        			<div class="modal-header">\
                        <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>\
                        <h4>Sending your CV by email</h4>\
                    </div>\
        			<div class="modal-body clearfix">\
                        <form id="sendingForm"></form>\
                    </div>\
        		</div>\
        	</div>\
        ';
    this.preview = $(document.createElement('DIV')).addClass('modal');
    content = swig.render(template);
    this.preview.html(content);
    $('body').append(this.preview);
    send_form = new Form({
      'id': '#sendingForm',
      'action': '/cvs/send/',
      'submit': 'Send',
      'callback': null,
      'clear_callback': null,
      'fields': [
        {
          'name': 'subject',
          'type': 'text',
          'ph': 'Subject',
          'message': 'Please enter the subject of email'
        }, {
          'name': 'recipient',
          'type': 'email',
          'ph': 'The e-mail address of receiver',
          'message': 'Please enter the receiver'
        }, {
          'name': 'text',
          'type': 'text',
          'widget': 'textarea',
          'ph': 'The message body',
          'message': 'Please enter the message'
        }
      ]
    });
    send_form.render();
    $('input[name="id"]', send_form.preview).val(this.id);
    $('.formSubmit', send_form.preview).click(function() {
      $(_this.preview).modal('hide');
      return $(_this.preview).remove();
    });
    return $(this.preview).modal('show');
  };

  return Send;

})();

CurriculumVitae = (function() {

  function CurriculumVitae(data) {
    this.id = data.id;
    this.title = data.title;
    this.studies = data.studies;
    this.works = data.works;
    this.awards = data.awards;
    this.abilities = data.abilities;
    this.pdf = data.pdf;
    this.image = data.image;
  }

  CurriculumVitae.prototype.save = function() {
    var _this = this;
    return $.get('/cvs/', {
      'id': this.id,
      'title': this.title,
      'studies': this.studies,
      'works': this.works,
      'awards': this.awards,
      'abilities': this.abilities
    }, function(data) {
      var p_bar;
      p_bar = new Progress({
        'id': data.message,
        'total': data.total
      });
      p_bar.render();
      return p_bar.check();
    });
  };

  CurriculumVitae.prototype.render = function() {
    var content, template,
      _this = this;
    template = '\
            <a href="{{ cv.pdf }}">\
                <img src="{{ cv.image }}" alt="{{ cv.title }}" class="img-thumbnail" />\
                <p><strong>{{ cv.title }}</strong></p>\
            </a>\
            <p>\
                <button class="send btn btn-default">Send</button>\
                <button class="edit btn btn-default">Edit</button>\
                <button class="delete btn btn-default">Delete</button>\
            </p>\
        ';
    this.preview = $(document.createElement('DIV')).addClass('col-md-3');
    content = swig.render(template, {
      locals: {
        cv: this
      }
    });
    this.preview.html(content);
    $('#cv-previews').prepend(this.preview);
    $('.edit', this.preview).click(function() {
      _this.populate();
      return $('html, body').animate({
        scrollTop: $("#generateCV").offset().top - 100
      }, 500);
    });
    $('button.delete', this.preview).click(function() {
      var confirm;
      confirm = new Confirm({
        'id': _this.id,
        'url': '/cvs/delete/',
        'callback': 'base.get_cvs()'
      });
      return confirm.render();
    });
    return $('button.send', this.preview).click(function() {
      var send;
      send = new Send(_this.id);
      return send.render();
    });
  };

  CurriculumVitae.prototype.populate = function() {
    var a, ab, ability, award, s, study, w, work, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _results;
    base.current_cv = this;
    $('#generateCV input').val(this.title);
    $('input[type="checkbox"]').prop('checked', false);
    _ref = this.studies;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      study = _ref[_i];
      _ref1 = base.datas['studies'];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        s = _ref1[_j];
        if (study === s.id) {
          $('input[type="checkbox"]', s.preview).prop('checked', 'yes');
        }
      }
    }
    _ref2 = this.works;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      work = _ref2[_k];
      _ref3 = base.datas['works'];
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        w = _ref3[_l];
        if (work === w.id) {
          $('input[type="checkbox"]', w.preview).prop('checked', 'yes');
        }
      }
    }
    _ref4 = this.awards;
    for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
      award = _ref4[_m];
      _ref5 = base.datas['awards'];
      for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
        a = _ref5[_n];
        if (award === a.id) {
          $('input[type="checkbox"]', a.preview).prop('checked', 'yes');
        }
      }
    }
    _ref6 = this.abilities;
    _results = [];
    for (_o = 0, _len6 = _ref6.length; _o < _len6; _o++) {
      ability = _ref6[_o];
      _results.push((function() {
        var _len7, _p, _ref7, _results1;
        _ref7 = base.datas['abilities'];
        _results1 = [];
        for (_p = 0, _len7 = _ref7.length; _p < _len7; _p++) {
          ab = _ref7[_p];
          if (ability === ab.id) {
            _results1.push($('input[type="checkbox"]', ab.preview).prop('checked', 'yes'));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  return CurriculumVitae;

})();

Language = (function() {

  function Language(data) {
    this.id = data.id;
    this.lang = data.lang;
    this.read = data.read;
    this.write = data.write;
    this.speak = data.speak;
  }

  Language.prototype.clear_form = function() {
    this.id = null;
    this.lang = '';
    this.read = 1;
    this.write = 1;
    this.speak = 1;
    return this.render_form();
  };

  Language.prototype.render_form = function() {
    var content, template,
      _this = this;
    template = '\
                <input name="id" type="hidden" value="{{ form.id }}" />\
                <div class="row">\
                    <div class="col-md-6 col-md-offset-3">\
                        <div class="form-group">\
                        	<input type="text" class="form-control" placeholder="Language *" data-i18n="[placeholder]Language" name="lang" value="{{ form.lang }}"/>\
                        </div>\
                        <p>\
                        	<strong data-i18n="Read">Read: </strong>\
                        </p>\
                        <div class="form-group">\
                        	<div id="read-slider"></div>\
                        </div>\
                        <p>\
                        	<strong data-i18n="Write">Write: </strong>\
                        </p>\
                        <div class="form-group">\
                        	<div id="write-slider"></div>\
                        </div>\
                        <p>\
                        	<strong data-i18n="Speak">Speak: </strong>\
                        </p>\
                        <div class="form-group">\
                        	<div id="speak-slider"></div>\
                        </div>\
                    </div>\
                    <div class="clearfix"></div>\
                    <div class="col-lg-12 text-center">\
                        <div class="alert"></div>\
                        <div class="formClear btn btn-xl danger" data-i18n="Clear the form">Clear the form</div>\
                        <button type="button" class="formSubmit btn btn-xl" data-i18n="Add">Add</button>\
                    </div>\
                </div>\
        ';
    this.form_preview = $('#langForm');
    content = swig.render(template, {
      locals: {
        form: this
      }
    });
    this.form_preview.html(content);
    this.read_slider = $('#read-slider', this.form_preview).slider({
      min: 1,
      max: 6,
      range: "min",
      value: this.read,
      slide: function(event, ui) {
        return _this.read = ui.value;
      }
    });
    this.write_slider = $('#write-slider', this.form_preview).slider({
      min: 1,
      max: 6,
      range: "min",
      value: this.write,
      slide: function(event, ui) {
        return _this.write = ui.value;
      }
    });
    this.speak_slider = $('#speak-slider', this.form_preview).slider({
      min: 1,
      max: 6,
      range: "min",
      value: this.speak,
      slide: function(event, ui) {
        return _this.speak = ui.value;
      }
    });
    $('.formSubmit', this.form_preview).click(function() {
      _this.lang = $('[name="lang"]', _this.form_preview).val();
      $.get('/lang/', {
        'id': _this.id,
        'lang': _this.lang,
        'read': _this.read,
        'write': _this.write,
        'speak': 'speak',
        speak: _this.speak
      }, function(data) {
        var p_bar;
        base.get_languages();
        p_bar = new Progress({
          'id': data.message,
          'total': data.total
        });
        p_bar.render();
        return p_bar.check();
      });
      return _this.clear_form();
    });
    $('.formClear', this.form_preview).click(function() {
      return _this.clear_form();
    });
    return $('body *').i18n();
  };

  Language.prototype.render = function() {
    var content, template,
      _this = this;
    template = '\
                <td class="sel">{{ data.lang }}</td>\
                <td class="sel">{{ data.read }}</td>\
                <td class="sel">{{ data.write }}</td>\
                <td class="sel">{{ data.speak }}</td>\
                <td class="text-right">\
                    <button type="button" class="btn btn-default edit page-scroll" aria-label="Edit">\
                        <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>\
                    </button>\
                    <button type="button" class="btn btn-default delete" aria-label="Delete">\
                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>\
                    </button>\
                </td>\
        ';
    this.preview = $(document.createElement('TR'));
    content = swig.render(template, {
      locals: {
        data: this
      }
    });
    this.preview.html(content);
    $('.edit', this.preview).click(function() {
      return _this.render_form();
    });
    $('#languages tbody').append(this.preview);
    return $('.delete', this.preview).click(function() {
      var confirm;
      confirm = new Confirm({
        'id': _this.id,
        'url': '/lang/delete/',
        'callback': 'base.get_languages()'
      });
      return confirm.render();
    });
  };

  return Language;

})();

Form = (function() {

  function Form(data) {
    this.id = data.id;
    this.action = data.action;
    this.fields = data.fields;
    this.submit = data.submit;
    this.callback = data.callback;
    this.clear_callback = data.clear_callback;
  }

  Form.prototype.clear_form = function() {
    $('[name="id"]', this.id).val('');
    $.each($('.form-group input, .form-group textarea', this.preview), function() {
      return $(this).val('');
    });
    return $.each($('input[type="checkbox"]', this.preview), function() {
      return $(this).attr('checked', false);
    });
  };

  Form.prototype.form_content = function() {
    var field, ret, _i, _len, _ref;
    ret = {};
    ret['cvs'] = [];
    ret['id'] = $('[name="id"]', this.id).val();
    _ref = this.fields;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      field = _ref[_i];
      ret[field.name] = $("[name=" + field['name'] + "]", this.id).val();
    }
    $.each($('input[type="checkbox"]', this.preview), function() {
      if ($(this).is(':checked')) {
        return ret['cvs'].push($(this).val());
      }
    });
    return ret;
  };

  Form.prototype.populate = function(data) {
    var c_id, field, _i, _j, _len, _len1, _ref, _ref1, _results;
    this.clear_form();
    $('html, body').animate({
      scrollTop: $(this.id).offset().top - 100
    }, 500);
    $('[name="id"]', this.id).val(data.id);
    _ref = this.fields;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      field = _ref[_i];
      $("[name=" + field['name'] + "]", this.id).val(data[field['name']]);
    }
    _ref1 = data.cvs;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      c_id = _ref1[_j];
      _results.push($('input[name="cvs"].cv' + c_id, this.preview).prop('checked', 'yes'));
    }
    return _results;
  };

  Form.prototype.render = function() {
    var content, template,
      _this = this;
    template = '\
                <input name="id" type="hidden" value="" />\
                <div class="row">\
                    <div class="{% if form.callback %}col-md-6 col-md-offset-3{% else %}col-lg-12{% endif %}">\
                        {% for field in form.fields %}\
                            <div class="form-group">\
                                {% if field.widget == "textarea" %}\
                                    <textarea class="form-control" placeholder="{{ field.ph }}" data-i18n="[placeholder]{{ field.ph }}" name="{{ field.name }}" required data-validation-required-message="{{ field.message }}"></textarea>\
                                {% else %}\
                                    <input type="{{ field.type }}" class="form-control" placeholder="{{ field.ph }}" data-i18n="[placeholder]{{ field.ph }}" name="{{ field.name }}" required data-validation-required-message="{{ field.message }}">\
                                {% endif %}\
                                <p class="help-block text-danger"></p>\
                            </div>\
                        {% endfor %}\
                        {% if form.callback %}\
                            <p>\
                                <b data-i18n="Include in CV:">Include in CV:</b>\
                            </p>\
                            {% for cv in cvs %}\
                                <div class="checkbox">\
                                <label><input class="cv{{ cv.id }}" name="cvs" type="checkbox" value="{{ cv.id }}">{{ cv.title }}</label>\
                                </div>\
                            {% endfor %}\
                        {% endif %}\
                    </div>\
                    <div class="clearfix"></div>\
                    <div class="col-lg-12 text-center">\
                        <div class="alert"></div>\
                        <div class="formClear btn btn-xl danger" data-i18n="Clear the form">Clear the form</div>\
                        <button type="button" class="formSubmit btn btn-xl" data-i18n="{{ form.submit }}">{{ form.submit }}</button>\
                    </div>\
                </div>\
        ';
    this.preview = $(this.id);
    content = swig.render(template, {
      locals: {
        form: this,
        cvs: base.cvs
      }
    });
    this.preview.html(content);
    $('body *').i18n();
    $('.formClear', this.preview).click(function() {
      return _this.clear_form();
    });
    return $('.formSubmit', this.preview).click(function() {
      return $.get(_this.action, _this.form_content(), function(data) {
        var p_bar;
        if (data.success === true) {
          eval(_this.callback);
          _this.clear_form();
          eval(_this.clear_callback);
        }
        p_bar = new Progress({
          'id': data.message,
          'total': data.total
        });
        p_bar.render();
        return p_bar.check();
      });
    });
  };

  return Form;

})();

base = new Base;

Confirm = (function() {

  function Confirm(data) {
    this.url = data.url;
    this.id = data.id;
    this.callback = data.callback;
  }

  Confirm.prototype.render = function() {
    var content, template,
      _this = this;
    template = '\
        	<div class="modal-dialog">\
        		<div class="modal-content">\
        			<div class="modal-header">\
                        <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>\
                        <h4>Are you sure want to delete this item?</h4>\
                    </div>\
        			<div class="modal-body clearfix">Be carefull, this can not be undone</div>\
        			<div class="modal-footer">\
                        <div class="btn btn-success delete">Yes, delete it</div>\
                        <div class="btn btn-default" data-dismiss="modal">Cancel</div>\
                    </div>\
        		</div>\
        	</div>\
        ';
    this.modal = $(document.createElement('DIV')).addClass('modal');
    content = swig.render(template, {
      locals: {
        modal: this
      }
    });
    $(this.modal).html(content);
    $('body').append(this.modal);
    $('div.delete', this.modal).click(function() {
      return $.get(_this.url, {
        'id': _this.id
      }, function(data) {
        var p_bar;
        eval(_this.callback);
        base.scroll.resize();
        $(_this.modal).modal('hide');
        $(_this.modal).remove();
        p_bar = new Progress({
          'id': data.message,
          'total': data.total
        });
        p_bar.render();
        return p_bar.check();
      });
    });
    return $(this.modal).modal('show');
  };

  return Confirm;

})();

Study = (function() {

  function Study(data) {
    this.id = data.id;
    this.inst = data.inst;
    this.faculty = data.faculty;
    this.begin_year = data.begin_year;
    this.end_year = data.end_year;
    this.cvs = data.cvs;
  }

  Study.prototype.render = function() {
    var content, template,
      _this = this;
    template = '\
                <td class="sel"><input type="checkbox"></td>\
                <td class="sel">{{ study.begin_year }}</td>\
                <td class="sel">{{ study.end_year }}</td>\
                <td class="sel">{{ study.inst }}</td>\
                <td class="sel">{{ study.faculty }}</td>\
                <td class="text-right">\
                    <button type="button" class="btn btn-default edit page-scroll" aria-label="Edit">\
                        <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>\
                    </button>\
                    <button type="button" class="btn btn-default delete" aria-label="Delete">\
                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>\
                    </button>\
                </td>\
        ';
    this.preview = $(document.createElement('TR'));
    content = swig.render(template, {
      locals: {
        study: this
      }
    });
    this.preview.html(content);
    $('button.delete', this.preview).click(function() {
      var confirm;
      confirm = new Confirm({
        'id': _this.id,
        'url': '/studies/delete/',
        'callback': 'base.get_studies()'
      });
      return confirm.render();
    });
    $('button.edit', this.preview).click(function() {
      base.study_form.populate(_this);
      location.hash = '#studiesInfo';
      return base.active_study = _this.id;
    });
    $('.sel', this.preview).click(function() {
      var index;
      index = base.current_cv.studies.indexOf(_this.id);
      if (index > -1) {
        base.current_cv.studies.splice(index, 1);
        return $('input[type="checkbox"]', _this.preview).prop('checked', false);
      } else {
        base.current_cv.studies.push(_this.id);
        return $('input[type="checkbox"]', _this.preview).prop('checked', 'yes');
      }
    });
    return $('#studies tbody').append(this.preview);
  };

  return Study;

})();

Work = (function() {

  function Work(data) {
    this.id = data.id;
    this.inst = data.inst;
    this["function"] = data["function"];
    this.comments = data.comments;
    this.begin_year = data.begin_year;
    this.end_year = data.end_year;
    this.cvs = data.cvs;
  }

  Work.prototype.render = function() {
    var content, template,
      _this = this;
    template = '\
                <td class="sel"><input type="checkbox"></td>\
                <td class="sel">{{ work.begin_year }}</td>\
                <td class="sel">{{ work.end_year }}</td>\
                <td class="sel">{{ work.inst }}</td>\
                <td class="sel">\
                    {{ work.function }}\
                    {% if work.comments %}\
                        <br />{{ work.comments|safe }}\
                    {% endif %}\
                </td>\
                <td class="text-right">\
                    <button type="button" class="btn btn-default edit page-scroll" aria-label="Edit">\
                        <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>\
                    </button>\
                    <button type="button" class="btn btn-default delete" aria-label="Delete">\
                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>\
                    </button>\
                </td>\
        ';
    this.preview = $(document.createElement('TR'));
    content = swig.render(template, {
      locals: {
        work: this
      }
    });
    this.preview.html(content);
    $('button.delete', this.preview).click(function() {
      var confirm;
      confirm = new Confirm({
        'id': _this.id,
        'url': '/works/delete/',
        'callback': 'base.get_works()'
      });
      return confirm.render();
    });
    $('button.edit', this.preview).click(function() {
      base.work_form.populate(_this);
      return base.active_work = _this.id;
    });
    $('.sel', this.preview).click(function() {
      var index;
      index = base.current_cv.works.indexOf(_this.id);
      if (index > -1) {
        base.current_cv.works.splice(index, 1);
        return $('input[type="checkbox"]', _this.preview).prop('checked', false);
      } else {
        base.current_cv.works.push(_this.id);
        return $('input[type="checkbox"]', _this.preview).prop('checked', 'yes');
      }
    });
    return $('#work tbody').append(this.preview);
  };

  return Work;

})();

Award = (function() {

  function Award(data) {
    this.id = data.id;
    this.title = data.title;
    this.year = data.year;
    this.description = data.description;
    this.cvs = data.cvs;
  }

  Award.prototype.render = function() {
    var content, template,
      _this = this;
    template = '\
                <td class="sel"><input type="checkbox"></td>\
                <td class="sel">{{ award.year }}</td>\
                <td class="sel">{{ award.title }}</td>\
                <td class="sel">\
                    {% if award.description %}\
                        {{ award.description|safe }}\
                    {% endif %}\
                </td>\
                <td class="text-right">\
                    <button type="button" class="btn btn-default edit page-scroll" aria-label="Edit">\
                        <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>\
                    </button>\
                    <button type="button" class="btn btn-default delete" aria-label="Delete">\
                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>\
                    </button>\
                </td>\
        ';
    this.preview = $(document.createElement('TR'));
    content = swig.render(template, {
      locals: {
        award: this
      }
    });
    this.preview.html(content);
    $('button.delete', this.preview).click(function() {
      var confirm;
      confirm = new Confirm({
        'id': _this.id,
        'url': '/awards/delete/',
        'callback': 'base.get_awards()'
      });
      return confirm.render();
    });
    $('button.edit', this.preview).click(function() {
      base.award_form.populate(_this);
      return base.active_award = _this.id;
    });
    $('.sel', this.preview).click(function() {
      var index;
      index = base.current_cv.awards.indexOf(_this.id);
      if (index > -1) {
        base.current_cv.awards.splice(index, 1);
        return $('input[type="checkbox"]', _this.preview).prop('checked', false);
      } else {
        base.current_cv.awards.push(_this.id);
        return $('input[type="checkbox"]', _this.preview).prop('checked', 'yes');
      }
    });
    return $('#awards tbody').append(this.preview);
  };

  return Award;

})();

Ability = (function() {

  function Ability(data) {
    this.id = data.id;
    this.title = data.title;
    this.description = data.description;
    this.cvs = data.cvs;
  }

  Ability.prototype.render = function() {
    var content, template,
      _this = this;
    template = '\
                <td class="sel"><input type="checkbox"></td>\
                <td class="sel">{{ ability.title }}</td>\
                <td class="sel">\
                    {{ ability.description|safe }}\
                </td>\
                <td class="text-right">\
                    <button type="button" class="btn btn-default edit page-scroll" aria-label="Edit">\
                        <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>\
                    </button>\
                    <button type="button" class="btn btn-default delete" aria-label="Delete">\
                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>\
                    </button>\
                </td>\
        ';
    this.preview = $(document.createElement('TR'));
    content = swig.render(template, {
      locals: {
        ability: this
      }
    });
    this.preview.html(content);
    $('button.delete', this.preview).click(function() {
      var confirm;
      confirm = new Confirm({
        'id': _this.id,
        'url': '/abilities/delete/',
        'callback': 'base.get_abilities()'
      });
      return confirm.render();
    });
    $('button.edit', this.preview).click(function() {
      base.ability_form.populate(_this);
      return base.active_ability = _this.id;
    });
    $('.sel', this.preview).click(function() {
      var index;
      index = base.current_cv.abilities.indexOf(_this.id);
      if (index > -1) {
        base.current_cv.abilities.splice(index, 1);
        return $('input[type="checkbox"]', _this.preview).prop('checked', false);
      } else {
        base.current_cv.abilities.push(_this.id);
        return $('input[type="checkbox"]', _this.preview).prop('checked', 'yes');
      }
    });
    return $('#skills tbody').append(this.preview);
  };

  return Ability;

})();

Progress = (function() {

  function Progress(data) {
    this.id = data.id;
    this.total = data.total;
  }

  Progress.prototype.render = function() {
    var content, template;
    template = '\
            <div class="progress">\
                <div class="progress-bar progress-bar-striped active" role="progressbar"\
                    aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width:0%">\
                        0%\
                </div>\
            </div>\
        ';
    this.preview = $(document.createElement('DIV')).addClass('bar-container');
    content = swig.render(template);
    this.preview.html(content);
    return $('#progress-info').append(this.preview);
  };

  Progress.prototype.check = function() {
    var current_val, interval, me, step;
    me = this;
    step = 100 / this.total;
    current_val = 0;
    return interval = setInterval(function() {
      var _this = this;
      return $.get('/messages/', {
        'parent_id': me.id
      }, function(data) {
        if (data.finish) {
          clearInterval(interval);
          $.notify('All jobs are done!', 'success');
          return $(me.preview).remove();
        } else {
          return $.each(data, function() {
            var m_type;
            if (this.success) {
              m_type = 'success';
            } else {
              m_type = 'danger';
            }
            current_val += step;
            $('.progress-bar', me.preview).html(this.message);
            $('.progress-bar', me.preview).attr('aria-valuenow', current_val);
            $('.progress-bar', me.preview).css('width', current_val + '%');
            if (this.reload === 'cv') {
              return base.get_cvs(true);
            }
          });
        }
      });
    }, 5000);
  };

  return Progress;

})();

$('.formSubmit', '#generateCV').click(function() {
  base.current_cv.title = $('input', '#generateCV').val();
  return base.current_cv.save();
});

$('.formClear', '#generateCV').click(function() {
  base.current_cv = new CurriculumVitae({
    'id': null,
    'title': '',
    'studies': [],
    'works': [],
    'awards': [],
    'abilities': [],
    'pdf': '',
    'image': ''
  });
  $.each($('input', '#generateCV'), function() {
    return $(this).val('');
  });
  return $.each($('input[type="checkbox"]'), function() {
    return $(this).attr('checked', false);
  });
});

$('.lang').click(function() {
  var _this = this;
  return $.get('/human/lang/', {
    'lang': $(this).text()
  }, function(data) {
    base.get_studies();
    base.get_works();
    base.get_awards();
    base.get_abilities();
    base.get_languages();
    base.get_cvs(true);
    i18n.setLng($(_this).text());
    $('body *').i18n();
    $('.lang').removeClass('active');
    return $('.lang.' + $(_this).text()).addClass('active');
  });
});

$('.formSubmit', '#generalForm').click(function() {
  var form;
  form = $('#generalForm');
  return $.get('/human/', {
    'name': $('[name="name"]', form).val(),
    'web': $('[name="web"]', form).val(),
    'phone': $('[name="phone"]', form).val(),
    'email': $('[name="email"]', form).val()
  }, function(data) {
    var p_bar;
    p_bar = new Progress({
      'id': data.message,
      'total': data.total
    });
    p_bar.render();
    return p_bar.check();
  });
});
